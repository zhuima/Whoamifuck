name: Release

on:
  push:
    branches: [ "main", "master" ]  # 添加分支触发
    tags:
      - 'v*'
  pull_request:
    branches: [ "main", "master" ]  # 添加 PR 触发
  workflow_dispatch:  # 保留手动触发

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:  # 添加顶级权限配置
  contents: write
  packages: write
  pull-requests: write

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整的 git 历史
          submodules: 'recursive'  # 如果有子模块，确保也被检出
      
      - name: Setup git
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          
      - name: Install dependencies  # 添加依赖安装
        run: |
          sudo apt-get update
          sudo apt-get install -y systemctl

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: "1.74.0"  # 指定 Rust 版本
          override: true
          components: rustfmt, clippy  # 添加代码格式化和 lint 工具

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

  build-release:
    name: Build Release
    needs: build-and-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ''
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            suffix: ''
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: '.exe'
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ''
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ''

    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: "1.74.0"  # 指定 Rust 版本
          target: ${{ matrix.target }}
          override: true

      - name: Build target
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Prepare assets
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          tar czvf ../../../whoamifuck-${{ matrix.target }}.tar.gz whoamifuck${{ matrix.suffix }}
          cd -

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: whoamifuck-${{ matrix.target }}
          path: whoamifuck-${{ matrix.target }}.tar.gz

  create-release:
    name: Create Release
    needs: build-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: whoamifuck-*/whoamifuck-*.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true

  build-and-push-image:
    name: Build and Push Docker image
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
      
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}